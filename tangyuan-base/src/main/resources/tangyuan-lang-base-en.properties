# Language EN

tangyuan.starting=tangyuan framework starting, version: {}
tangyuan.starting.successfully=tangyuan framework successfully.

tangyuan.stopping=tangyuan framework stopping.
tangyuan.stopping.successfully=tangyuan framework stop successfully.

component.starting={} component starting, version: {}
component.starting.successfully={} component started successfully.

component.stopping={} component stopping.
component.stopping.successfully={} component stoped successfully.

component.dividing.line=>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

method.need.override=subclass needs to override this method.

component.missing=Missing {} component

################## Instance
instance.stop.id=stop '{}': {}
instance.start.id=start '{}': {}

instance.stop=stop '{}'
instance.start=start '{}'

################## common
parameter.empty=The parameter '{}' cannot be empty.
parameter.invalid=Invalid parameter '{}': {}.
property.empty=The property '{}' cannot be empty.
property.invalid=Invalid property '{}': {}.

convert.data.error=data convert error
convert.result.error=result convert error
convert.result.x.error={} result convert error

################## XML

xml.start.parsing=*** Start parsing: {} ***
xml.start.parsing.type=## Start parsing {}: {}

xml.tag.ignored=Ignored tag '{}'. Location: resource[{}]
xml.tag.invalid=Invalid tag '{}'. Location: resource[{}]

xml.tag.unsupported=Unsupported tag '{}'. Location: resource[{}]
xml.tag.attribute.empty=Attribute '{}' cannot be empty. Location: tag[{}], resource[{}]
xml.tag.attribute.invalid=Invalid attribute '{}'. Location: tag[{}], resource[{}]
xml.tag.attribute.invalid.should=Invalid attribute '{}', should be '{}'. Location: tag[{}], resource[{}]
xml.tag.attribute.value.invalid=Invalid attribute value '{}'. Location: attribute[{}], tag[{}], resource[{}]
# xml.tag.attribute.reference.invalid=Invalid reference '{}'. Location: attribute[{}], tag[{}], resource[{}]
# xml.tag.attribute.invalid.reference=Invalid reference '{}'. Location: attribute[{}], tag[{}], resource[{}]
# xml.tag.attribute.invalid.reference.id=Invalid reference '{}'. Location: id[{}], attribute[{}], tag[{}], resource[{}]

xml.tag.attribute.reference.invalid=Invalid reference '{}'. Location: attribute[{}], tag[{}], resource[{}]
xml.tag.attribute.reference.id.invalid=Invalid reference '{}'. Location: id[{}], attribute[{}], tag[{}], resource[{}]

xml.tag.attribute.repeated=repeated attribute '{}'. Location: tag[{}], resource[{}]


xml.tag.content.empty=Content cannot be empty. Location: tag[{}], resource[{}]
xml.tag.content-id.empty=Content cannot be empty. Location: id:[{}], tag[{}], resource[{}]

xml.tag.miss=missing tag '{}'. Location: resource[{}]
xml.tag.sub.miss=missing tag '{}'. Location: tag[{}], resource[{}]

xml.resource.load=load resource: {}
xml.tag.resource.load=load '{}' resource: {}
xml.tag.resource.load.failed=load '{}' resource failed. resource: {}

xml.tag.mostone=tag '{}' can have at most one.
xml.tag.mostone.default=default tag '{}' can have at most one.
xml.tag.mostone.default.resource=default tag '{}' can have at most one. resource: {}

xml.class.impl.interface=class '{}' must implement the interface '{}'
xml.class.impl.superClass=class '{}' must extends the superClass '{}'

xml.tag.id.repeated=repeated id '{}'. Location: tag[{}], resource[{}]
xml.tag.x.repeated=repeated {} '{}'. Location: tag[{}], resource[{}]
xml.tag.repeated=repeated '{}'. Location: tag[{}], resource[{}]

add.tag.class=add '{}' class: {}
add.tag.service=add <{}>: {}
add.tag=add '{}': {}
add.tag.info=add '{}': {}-{}

manager.enabled={} manager enabled
manager.xml.app.rule.add=add app rule: type[{}], value[{}]
manager.xml.sevice.rule.add=add sevice rule: sevice[], type[{}], value[{}]


thread.x.started=thread '{}' started successfully
thread.x.stopping=thread '{}' stopping
thread.x.ended=thread '{}' ended


unsupported.type=unsupported type: '{}'
unsupported.type.n=unsupported {} type: '{}'

resource.reload=reload resource: {}
add.class=add class: {}


config.property.load=load '{}' config property.

register.as.service=## register '{}' as service

################## OGNL
ognl.expr.illegal=Illegal expression: {}
ognl.expr.n.illegal=Illegal '{}' expression: {}
################## Cache Component
cacheUse.expr.reference.invalid=Invalid cache reference '{}'. cacheUse: '{}' service: '{}'
cacheUse.expr.key.invalid=Invalid cache key '{}'. cacheUse: '{}' service: '{}'
cacheClean.expr.reference.invalid=Invalid cache reference '{}'. cacheClean: '{}' service: '{}'
cacheClean.expr.key.invalid=Invalid cache key '{}'. cacheClean: '{}' service: '{}'

cache.resource.empty=Attribute '{}' cannot be empty. cache.id: {}


################## AOP Component

################## RPC Component
remote-node.id.invalid=Invalid remote-node id '{}'. url: {}
remote-node.domain.invalid=Invalid remote-node domain '{}'. url: {}
rpc.missing.remote-node.client=Missing matching 'remote-node' or 'client'. url: {}

################## http client
xml.tag.attribute.reference.invalid.http-client=Invalid http-client reference '{}'.

################## sharding
sharding.value.key.invalid=Invalid sharding key: '{}' value: '{}'
sharding.value.key.invalid.reason.beyond=Invalid sharding key: '{}' value: '{}'. reason: 'beyond boundary'
sharding.value.invalid=Invalid sharding value: '{}'
sharding.value.empty=The sharding value cannot be empty.
